- ansible.builtin.import_tasks: 10-01-install-database-server.yml
  tags: install-database-server
  when: idp_local_db

- ansible.builtin.import_tasks: 10-02-use-external-database.yml
  tags: install-database-dependecies
  when: not idp_local_db

- name: install mariadb-dependecies
  ansible.builtin.apt:
    name: ['mariadb-client', 'libmariadb-java', 'python3-pymysql']
    state: present

- name: create symlink for tomcat
  ansible.builtin.file:
    src: /usr/share/java/mariadb-java-client.jar
    dest: /var/lib/tomcat9/lib/mariadb-java-client.jar
    state: link
  notify: restart tomcat

- name: install the jdbc plugin
  block:

    - name: check if the jdbc plugin is installed
      ansible.builtin.shell: "/opt/shibboleth-idp/bin/plugin.sh -l | grep '^Plugin: net.shibboleth.plugin.storage.jdbc'"
      register: idp_jdbc_plugin_status
      failed_when: idp_jdbc_plugin_status.rc != 0

    - name: debug
      debug:
        msg: idp_jdbc_plugin_status.rc

  rescue:

  # Download the JDBC plugin version number given in group_vars/idphosts/vars
  - name: download the latest jdbc plugin
    ansible.builtin.get_url:
      url: "{{ item }}"
      dest: /opt/install
      force: false
    loop:
      - "{{ jdbc_plugin_archive_url }}"
      - "{{ jdbc_plugin_signature_url }}"
      - "{{ idp_keys_url }}"

  - name: import the PGP key
    ansible.builtin.command: gpg --import PGP_KEYS
    args:
      chdir: /opt/install
    register: import_pgp_keys
    changed_when: "'imported:' in import_pgp_keys.stdout"

  - name: verify the download
    ansible.builtin.command: >
      gpg
      --verify
      java-plugin-jdbc-storage-{{ jdbc_plugin_version }}.tar.gz.asc
      java-plugin-jdbc-storage-{{ jdbc_plugin_version }}.tar.gz
    args:
      chdir: /opt/install
    register: verified_plugin_download
    changed_when: false

  - name: extract the archive if verified
    ansible.builtin.unarchive:
      src: "{{
        '/opt/install/java-plugin-jdbc-storage-' +
        jdbc_plugin_version +
        '.tar.gz'
      }}"
      dest: /opt/install
      remote_src: true
    when: verified_plugin_download is succeeded

  - name: install the jdbc plugin
    ansible.builtin.shell: "/opt/shibboleth-idp/bin/plugin.sh --truststore /opt/install/PGP_KEYS -i java-plugin-jdbc-storage-{{ jdbc_plugin_version }}.tar.gz"
    args:
      chdir: /opt/install
    register: idp_jdbc_plugin_installed
    #failed_when: "'[FAILED]' in idp_jdbc_plugin_installed.stdout"

  tags: tester

- name: configure database access via JDBCStorageService
  ansible.builtin.blockinfile:
    path: /opt/shibboleth-idp/conf/global.xml
    block: |
      <bean id="shibboleth.MySQLDataSource"
          class="%{mysql.class}"
          p:driverClassName="org.mariadb.jdbc.Driver"
          p:url="%{mysql.url}"
          p:username="%{mysql.username}"
          p:password="%{mysql.password}"
          p:maxWait="15000"
          p:testOnBorrow="true"
          p:maxActive="100"
          p:maxIdle="100"
          p:validationQuery="select 1"
          p:validationQueryTimeout="5" />
      <bean id="JDBCStorageService"
          parent="shibboleth.JDBCStorageService"
          p:cleanupInterval="%{idp.storage.cleanupInterval:PT10M}"
          p:dataSource-ref="shibboleth.MySQLDataSource" />
    insertbefore: </beans>
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK -->"
  notify: restart tomcat

- name: add database credentials to idp.properties
  ansible.builtin.blockinfile:
    path: /opt/shibboleth-idp/conf/idp.properties
    block: |
      mysql.class    = org.apache.tomcat.jdbc.pool.DataSource
      mysql.url      = jdbc:mysql://{{ database_host }}:3306/{{ database_name }}
      mysql.username = {{ database_user }}
    insertbefore: EOF

- name: add database password to secrets.properties
  ansible.builtin.lineinfile:
    path: /opt/shibboleth-idp/credentials/secrets.properties
    regexp: "^mysql.password"
    line: mysql.password = {{ database_password }}
  no_log: true
